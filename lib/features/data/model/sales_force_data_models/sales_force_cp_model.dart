import 'package:mytradeasia/features/domain/entities/sales_force_data_entities/sales_force_cp_entity.dart';

class SalesforceCPModel extends SalesforceCPEntity {
  int? totalSize;
  bool? done;
  List<Records>? records;

  SalesforceCPModel({this.totalSize, this.done, this.records});

  SalesforceCPModel.fromJson(Map<String, dynamic> json) {
    totalSize = json['totalSize'];
    done = json['done'];
    if (json['records'] != null) {
      records = <Records>[];
      json['records'].forEach((v) {
        records!.add(new Records.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['totalSize'] = totalSize;
    data['done'] = done;
    if (records != null) {
      data['records'] = records!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Records {
  Attributes? attributes;
  String? id;
  String? createdById;
  String? lastModifiedById;
  String? opportunityC;
  String? x1stSectorBLNoC;
  String? sailingOnAboutC;
  String? remarksC;
  double? quantityC;
  String? uOMC;
  String? productNameC;
  double? unitPriceUOMC;
  double? totalPriceC;
  String? invNoC;
  String? invDateC;
  String? bLNoC;
  String? shipperBankC;
  String? vesselVOYNoC;
  String? descriptionOfGoodsC;
  String? pINoC;
  String? remarksPackingListC;
  String? accountNameBackendC;
  String? consignedSoldToC;
  String? applicantNameAndAddressC;
  dynamic packingListC;
  String? bLDateC;
  String? authorizedSignatoryC;
  dynamic draweeC;
  dynamic freightChargesSIC;
  String? remarksPLC;
  String? countryOfOriginC;
  double? quantityPerContainerC;
  double? totalOfContainersC;
  String? cIC;
  String? eTAEstimatedDateOfArrivalC;
  String? bookingNmbrAutoC;
  double? amountInsuredC;
  double? rateC;
  double? premiumAmountC;
  double? stampDutyC;
  double? totalInsuranceAmountC;
  String? containerSizeC;
  String? vesselLabelC;
  String? totalPriceWordsC;
  bool? acceptanceC;
  String? countryOfFinalDestinationC;
  String? tenorC;
  String? businessEntityC;
  String? sUBJECTForShippingAdviseC;
  String? workedByC;
  String? sTATUSC;
  String? aWBNOC;
  String? bLAutoGeneratedNumberC;
  String? statusDealC;
  double? totalAdvancePaymentC;
  double? totalAMOUNTIncludngAllChargesC;
  double? amountAfterReducingAdvanceC;
  String? accountC;
  String? xeroDescC;
  String? paymentStatusC;
  String? bankAccountC;
  String? bankReferenceNoC;
  String? remarksForFinancingC;
  double? interestAmountC;
  double? receivedAmountC;
  double? discountedAmountC;
  String? receivedDateC;
  double? balanceAmountC;
  double? creditLimitC;
  double? taxC;
  String? totalPriceINRWordsC;
  bool? withHouseBLNoC;
  String? accountAddressC;
  String? todayC;
  double? totalAgentCommissionC;
  double? totalBrokerageChargeC;
  String? indicativeDueDateC;
  double? amountAfterDeductingAdvanceC;
  String? carrierNameC;
  double? totalAmountExcludingTaxC;
  String? totalAmountInclTaxInWordsC;
  double? totalAmountAfterTaxC;
  double? taxAmountBackendC;
  double? totalAMOUNTIncludingAllChargesBacC;
  double? overDueDaysIndonesiaC;
  String? dueDateC;
  double? remainingPaymentC;
  double? lateDaysC;
  double? totalPurchaseC;
  double? totalPurchasePriceC;
  double? totalPurchaseSOC;
  String? aWBServiceC;
  double? profitMarginC;
  String? aWBOriginAddressC;
  String? aWBDestinationAddressC;
  String? aWBCurrentStatusC;
  String? aWBCurrentLocationC;
  String? aWBStatusDescriptionC;
  String? aWBLastStatusUpdatedC;

  Records(
      {this.attributes,
      this.id,
      this.createdById,
      this.lastModifiedById,
      this.opportunityC,
      this.x1stSectorBLNoC,
      this.sailingOnAboutC,
      this.remarksC,
      this.quantityC,
      this.uOMC,
      this.productNameC,
      this.unitPriceUOMC,
      this.totalPriceC,
      this.invNoC,
      this.invDateC,
      this.bLNoC,
      this.shipperBankC,
      this.vesselVOYNoC,
      this.descriptionOfGoodsC,
      this.pINoC,
      this.remarksPackingListC,
      this.accountNameBackendC,
      this.consignedSoldToC,
      this.applicantNameAndAddressC,
      this.packingListC,
      this.bLDateC,
      this.authorizedSignatoryC,
      this.draweeC,
      this.freightChargesSIC,
      this.remarksPLC,
      this.countryOfOriginC,
      this.quantityPerContainerC,
      this.totalOfContainersC,
      this.cIC,
      this.eTAEstimatedDateOfArrivalC,
      this.bookingNmbrAutoC,
      this.amountInsuredC,
      this.rateC,
      this.premiumAmountC,
      this.stampDutyC,
      this.totalInsuranceAmountC,
      this.containerSizeC,
      this.vesselLabelC,
      this.totalPriceWordsC,
      this.acceptanceC,
      this.countryOfFinalDestinationC,
      this.tenorC,
      this.businessEntityC,
      this.sUBJECTForShippingAdviseC,
      this.workedByC,
      this.sTATUSC,
      this.aWBNOC,
      this.bLAutoGeneratedNumberC,
      this.statusDealC,
      this.totalAdvancePaymentC,
      this.totalAMOUNTIncludngAllChargesC,
      this.amountAfterReducingAdvanceC,
      this.accountC,
      this.xeroDescC,
      this.paymentStatusC,
      this.bankAccountC,
      this.bankReferenceNoC,
      this.remarksForFinancingC,
      this.interestAmountC,
      this.receivedAmountC,
      this.discountedAmountC,
      this.receivedDateC,
      this.balanceAmountC,
      this.creditLimitC,
      this.taxC,
      this.totalPriceINRWordsC,
      this.withHouseBLNoC,
      this.accountAddressC,
      this.todayC,
      this.totalAgentCommissionC,
      this.totalBrokerageChargeC,
      this.indicativeDueDateC,
      this.amountAfterDeductingAdvanceC,
      this.carrierNameC,
      this.totalAmountExcludingTaxC,
      this.totalAmountInclTaxInWordsC,
      this.totalAmountAfterTaxC,
      this.taxAmountBackendC,
      this.totalAMOUNTIncludingAllChargesBacC,
      this.overDueDaysIndonesiaC,
      this.dueDateC,
      this.remainingPaymentC,
      this.lateDaysC,
      this.totalPurchaseC,
      this.totalPurchasePriceC,
      this.totalPurchaseSOC,
      this.aWBServiceC,
      this.profitMarginC,
      this.aWBOriginAddressC,
      this.aWBDestinationAddressC,
      this.aWBCurrentStatusC,
      this.aWBCurrentLocationC,
      this.aWBStatusDescriptionC,
      this.aWBLastStatusUpdatedC});

  Records.fromJson(Map<String, dynamic> json) {
    attributes = json['attributes'] != null
        ? new Attributes.fromJson(json['attributes'])
        : null;
    id = json['Id'];
    createdById = json['CreatedById'];
    lastModifiedById = json['LastModifiedById'];
    opportunityC = json['Opportunity__c'];
    x1stSectorBLNoC = json['X1st_Sector_BL_No__c'];
    sailingOnAboutC = json['Sailing_On_About__c'];
    remarksC = json['Remarks__c'];
    quantityC = json['Quantity__c'];
    uOMC = json['UOM__c'];
    productNameC = json['Product_Name__c'];
    unitPriceUOMC = json['Unit_Price_UOM__c'];
    totalPriceC = json['Total_Price__c'];
    invNoC = json['Inv_No__c'];
    invDateC = json['Inv_Date__c'];
    bLNoC = json['B_L_No__c'];
    shipperBankC = json['Shipper_Bank__c'];
    vesselVOYNoC = json['Vessel_VOY_No__c'];
    descriptionOfGoodsC = json['Description_of_Goods__c'];
    pINoC = json['PI_No__c'];
    remarksPackingListC = json['Remarks_Packing_List__c'];
    accountNameBackendC = json['Account_Name_Backend__c'];
    consignedSoldToC = json['Consigned_Sold_To__c'];
    applicantNameAndAddressC = json['Applicant_Name_and_Address__c'];
    packingListC = json['Packing_List__c'];
    bLDateC = json['B_L_Date__c'];
    authorizedSignatoryC = json['Authorized_Signatory__c'];
    draweeC = json['Drawee__c'];
    freightChargesSIC = json['Freight_Charges_SI__c'];
    remarksPLC = json['Remarks_PL__c'];
    countryOfOriginC = json['Country_of_Origin__c'];
    quantityPerContainerC = json['Quantity_Per_Container__c'];
    totalOfContainersC = json['Total_of_Containers__c'];
    cIC = json['CI__c'];
    eTAEstimatedDateOfArrivalC = json['ETA_estimated_Date_of_Arrival__c'];
    bookingNmbrAutoC = json['Booking_Nmbr_auto__c'];
    amountInsuredC = json['Amount_Insured__c'];
    rateC = json['Rate__c'];
    premiumAmountC = json['Premium_Amount__c'];
    stampDutyC = json['Stamp_Duty__c'];
    totalInsuranceAmountC = json['Total_Insurance_Amount__c'];
    containerSizeC = json['Container_Size__c'];
    vesselLabelC = json['Vessel_Label__c'];
    totalPriceWordsC = json['Total_Price_words__c'];
    acceptanceC = json['Acceptance__c'];
    countryOfFinalDestinationC = json['Country_of_Final_Destination__c'];
    tenorC = json['Tenor__c'];
    businessEntityC = json['Business_Entity__c'];
    sUBJECTForShippingAdviseC = json['SUBJECT_For_Shipping_Advise__c'];
    workedByC = json['Worked_By__c'];
    sTATUSC = json['STATUS__c'];
    aWBNOC = json['AWB_NO__c'];
    bLAutoGeneratedNumberC = json['BL_Auto_generated_Number__c'];
    statusDealC = json['Status_Deal__c'];
    totalAdvancePaymentC = json['Total_Advance_Payment__c'];
    totalAMOUNTIncludngAllChargesC =
        json['Total_AMOUNT_includng_all_charges__c'];
    amountAfterReducingAdvanceC = json['Amount_after_reducing_advance__c'];
    accountC = json['Account__c'];
    xeroDescC = json['Xero_Desc__c'];
    paymentStatusC = json['Payment_Status__c'];
    bankAccountC = json['Bank_Account__c'];
    bankReferenceNoC = json['Bank_Reference_No__c'];
    remarksForFinancingC = json['Remarks_for_Financing__c'];
    interestAmountC = json['Interest_Amount__c'];
    receivedAmountC = json['Received_Amount__c'];
    discountedAmountC = json['Discounted_Amount__c'];
    receivedDateC = json['Received_Date__c'];
    balanceAmountC = json['Balance_Amount__c'];
    creditLimitC = json['Credit_Limit__c'];
    taxC = json['Tax__c'];
    totalPriceINRWordsC = json['Total_Price_INR_words__c'];
    withHouseBLNoC = json['With_House_B_L_No__c'];
    accountAddressC = json['Account_Address__c'];
    todayC = json['Today__c'];
    totalAgentCommissionC = json['Total_Agent_Commission__c'];
    totalBrokerageChargeC = json['Total_Brokerage_Charge__c'];
    indicativeDueDateC = json['Indicative_Due_Date__c'];
    amountAfterDeductingAdvanceC = json['Amount_after_deducting_advance__c'];
    carrierNameC = json['Carrier_Name__c'];
    totalAmountExcludingTaxC = json['Total_Amount_Excluding_Tax__c'];
    totalAmountInclTaxInWordsC = json['Total_Amount_incl_Tax_In_Words__c'];
    totalAmountAfterTaxC = json['Total_amount_after_tax__c'];
    taxAmountBackendC = json['Tax_Amount_Backend__c'];
    totalAMOUNTIncludingAllChargesBacC =
        json['Total_AMOUNT_including_all_charges_Bac__c'];
    overDueDaysIndonesiaC = json['OverDue_Days_Indonesia__c'];
    dueDateC = json['Due_Date__c'];
    remainingPaymentC = json['Remaining_Payment__c'];
    lateDaysC = json['Late_Days__c'];
    totalPurchaseC = json['Total_Purchase__c'];
    totalPurchasePriceC = json['Total_Purchase_Price__c'];
    totalPurchaseSOC = json['Total_Purchase_SO__c'];
    aWBServiceC = json['AWB_Service__c'];
    profitMarginC = json['Profit_Margin__c'];
    aWBOriginAddressC = json['AWB_Origin_Address__c'];
    aWBDestinationAddressC = json['AWB_Destination_Address__c'];
    aWBCurrentStatusC = json['AWB_Current_Status__c'];
    aWBCurrentLocationC = json['AWB_Current_Location__c'];
    aWBStatusDescriptionC = json['AWB_Status_Description__c'];
    aWBLastStatusUpdatedC = json['AWB_Last_Status_Updated__c'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (attributes != null) {
      data['attributes'] = attributes!.toJson();
    }
    data['Id'] = id;
    data['CreatedById'] = createdById;
    data['LastModifiedById'] = lastModifiedById;
    data['Opportunity__c'] = opportunityC;
    data['X1st_Sector_BL_No__c'] = x1stSectorBLNoC;
    data['Sailing_On_About__c'] = sailingOnAboutC;
    data['Remarks__c'] = remarksC;
    data['Quantity__c'] = quantityC;
    data['UOM__c'] = uOMC;
    data['Product_Name__c'] = productNameC;
    data['Unit_Price_UOM__c'] = unitPriceUOMC;
    data['Total_Price__c'] = totalPriceC;
    data['Inv_No__c'] = invNoC;
    data['Inv_Date__c'] = invDateC;
    data['B_L_No__c'] = bLNoC;
    data['Shipper_Bank__c'] = shipperBankC;
    data['Vessel_VOY_No__c'] = vesselVOYNoC;
    data['Description_of_Goods__c'] = descriptionOfGoodsC;
    data['PI_No__c'] = pINoC;
    data['Remarks_Packing_List__c'] = remarksPackingListC;
    data['Account_Name_Backend__c'] = accountNameBackendC;
    data['Consigned_Sold_To__c'] = consignedSoldToC;
    data['Applicant_Name_and_Address__c'] = applicantNameAndAddressC;
    data['Packing_List__c'] = packingListC;
    data['B_L_Date__c'] = bLDateC;
    data['Authorized_Signatory__c'] = authorizedSignatoryC;
    data['Drawee__c'] = draweeC;
    data['Freight_Charges_SI__c'] = freightChargesSIC;
    data['Remarks_PL__c'] = remarksPLC;
    data['Country_of_Origin__c'] = countryOfOriginC;
    data['Quantity_Per_Container__c'] = quantityPerContainerC;
    data['Total_of_Containers__c'] = totalOfContainersC;
    data['CI__c'] = cIC;
    data['ETA_estimated_Date_of_Arrival__c'] = eTAEstimatedDateOfArrivalC;
    data['Booking_Nmbr_auto__c'] = bookingNmbrAutoC;
    data['Amount_Insured__c'] = amountInsuredC;
    data['Rate__c'] = rateC;
    data['Premium_Amount__c'] = premiumAmountC;
    data['Stamp_Duty__c'] = stampDutyC;
    data['Total_Insurance_Amount__c'] = totalInsuranceAmountC;
    data['Container_Size__c'] = containerSizeC;
    data['Vessel_Label__c'] = vesselLabelC;
    data['Total_Price_words__c'] = totalPriceWordsC;
    data['Acceptance__c'] = acceptanceC;
    data['Country_of_Final_Destination__c'] = countryOfFinalDestinationC;
    data['Tenor__c'] = tenorC;
    data['Business_Entity__c'] = businessEntityC;
    data['SUBJECT_For_Shipping_Advise__c'] = sUBJECTForShippingAdviseC;
    data['Worked_By__c'] = workedByC;
    data['STATUS__c'] = sTATUSC;
    data['AWB_NO__c'] = aWBNOC;
    data['BL_Auto_generated_Number__c'] = bLAutoGeneratedNumberC;
    data['Status_Deal__c'] = statusDealC;
    data['Total_Advance_Payment__c'] = totalAdvancePaymentC;
    data['Total_AMOUNT_includng_all_charges__c'] =
        totalAMOUNTIncludngAllChargesC;
    data['Amount_after_reducing_advance__c'] = amountAfterReducingAdvanceC;
    data['Account__c'] = accountC;
    data['Xero_Desc__c'] = xeroDescC;
    data['Payment_Status__c'] = paymentStatusC;
    data['Bank_Account__c'] = bankAccountC;
    data['Bank_Reference_No__c'] = bankReferenceNoC;
    data['Remarks_for_Financing__c'] = remarksForFinancingC;
    data['Interest_Amount__c'] = interestAmountC;
    data['Received_Amount__c'] = receivedAmountC;
    data['Discounted_Amount__c'] = discountedAmountC;
    data['Received_Date__c'] = receivedDateC;
    data['Balance_Amount__c'] = balanceAmountC;
    data['Credit_Limit__c'] = creditLimitC;
    data['Tax__c'] = taxC;
    data['Total_Price_INR_words__c'] = totalPriceINRWordsC;
    data['With_House_B_L_No__c'] = withHouseBLNoC;
    data['Account_Address__c'] = accountAddressC;
    data['Today__c'] = todayC;
    data['Total_Agent_Commission__c'] = totalAgentCommissionC;
    data['Total_Brokerage_Charge__c'] = totalBrokerageChargeC;
    data['Indicative_Due_Date__c'] = indicativeDueDateC;
    data['Amount_after_deducting_advance__c'] =
        amountAfterDeductingAdvanceC;
    data['Carrier_Name__c'] = carrierNameC;
    data['Total_Amount_Excluding_Tax__c'] = totalAmountExcludingTaxC;
    data['Total_Amount_incl_Tax_In_Words__c'] = totalAmountInclTaxInWordsC;
    data['Total_amount_after_tax__c'] = totalAmountAfterTaxC;
    data['Tax_Amount_Backend__c'] = taxAmountBackendC;
    data['Total_AMOUNT_including_all_charges_Bac__c'] =
        totalAMOUNTIncludingAllChargesBacC;
    data['OverDue_Days_Indonesia__c'] = overDueDaysIndonesiaC;
    data['Due_Date__c'] = dueDateC;
    data['Remaining_Payment__c'] = remainingPaymentC;
    data['Late_Days__c'] = lateDaysC;
    data['Total_Purchase__c'] = totalPurchaseC;
    data['Total_Purchase_Price__c'] = totalPurchasePriceC;
    data['Total_Purchase_SO__c'] = totalPurchaseSOC;
    data['AWB_Service__c'] = aWBServiceC;
    data['Profit_Margin__c'] = profitMarginC;
    data['AWB_Origin_Address__c'] = aWBOriginAddressC;
    data['AWB_Destination_Address__c'] = aWBDestinationAddressC;
    data['AWB_Current_Status__c'] = aWBCurrentStatusC;
    data['AWB_Current_Location__c'] = aWBCurrentLocationC;
    data['AWB_Status_Description__c'] = aWBStatusDescriptionC;
    data['AWB_Last_Status_Updated__c'] = aWBLastStatusUpdatedC;
    return data;
  }
}

class Attributes {
  String? type;
  String? url;

  Attributes({this.type, this.url});

  Attributes.fromJson(Map<String, dynamic> json) {
    type = json['type'];
    url = json['url'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['type'] = type;
    data['url'] = url;
    return data;
  }
}
